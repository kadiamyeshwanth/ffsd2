<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Worker Management Dashboard</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        /* Base Styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Arial, sans-serif;
        }
        
        :root {
            --primary-green: #4D7A70;
            --secondary-green: #6A9E8E;
            --light-green: #A3C5BB;
            --dark-grey: #363636;
            --medium-grey: #5A5A5A;
            --light-grey: #E0E0E0;
            --white: #FFFFFF;
            --black: #000000;
            --shadow: 0 2px 12px rgba(0, 0, 0, 0.08);
            --transition: all 0.3s ease;
            --border-radius: 8px;
            /* Font sizes */
            --font-size-h1: 24px;
            --font-size-h2: 20px;
            --font-size-h3: 18px;
            --font-size-h4: 16px;
            --font-size-body: 14px;
            --font-size-small: 12px;
        }

        body {
            background-color: var(--white);
            color: var(--dark-grey);
            line-height: 1.6;
            font-size: var(--font-size-body);
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        /* Dashboard Header */
        .dashboard-header {
            background-color: var(--primary-green);
            color: var(--white);
            padding: 15px 0;
            margin-bottom: 20px;
            box-shadow: var(--shadow);
        }

        .dashboard-header h1 {
            font-size: var(--font-size-h1);
            font-weight: 600;
        }

        /* Tabs Navigation */
        .tabs {
            display: flex;
            border-bottom: 2px solid var(--light-grey);
            margin-bottom: 25px;
            background-color: var(--white);
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
            position: relative;
        }

        .tab {
            padding: 15px 25px;
            font-size: var(--font-size-body);
            cursor: pointer;
            color: var(--dark-grey);
            transition: var(--transition);
            position: relative;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .tab:hover {
            background-color: rgba(77, 122, 112, 0.05);
        }

        .tab.active {
            font-weight: 600;
            color: var(--primary-green);
        }

        .tab.active::after {
            content: '';
            position: absolute;
            bottom: -2px;
            left: 0;
            width: 100%;
            height: 3px;
            background-color: var(--primary-green);
        }

        /* Section Headers and Controls */
        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            flex-wrap: wrap;
            gap: 15px;
        }

        .section-header h2 {
            font-size: var(--font-size-h2);
            font-weight: 600;
            color: var(--dark-grey);
        }

        .filter-controls {
            display: flex;
            gap: 10px;
            align-items: center;
        }

        .search-input, .filter-dropdown {
            padding: 10px 15px;
            border: 1px solid var(--light-grey);
            border-radius: var(--border-radius);
            font-size: var(--font-size-body);
            transition: var(--transition);
        }

        .search-input:focus, .filter-dropdown:focus {
            outline: none;
            border-color: var(--primary-green);
            box-shadow: 0 0 0 2px rgba(77, 122, 112, 0.2);
        }

        .search-input {
            width: 250px;
        }

        /* Sections */
        .section {
            display: none;
            animation: fadeIn 0.3s ease;
        }

        .section.active {
            display: block;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* Worker Cards */
        .worker-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 20px;
        }

        .worker-card {
            background: var(--white);
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
            overflow: hidden;
            transition: var(--transition);
            display: flex;
            flex-direction: column;
        }

        .worker-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
        }

        .worker-card-header {
            position: relative;
            background-color: var(--light-green);
            padding: 20px;
            text-align: center;
        }

        .profile-image {
            width: 80px;
            height: 60px;
            border-radius: 10px;
            border: 3px solid var(--white);
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            object-fit: cover;
            transition: var(--transition);
        }

        .profile-image:hover {
            transform: scale(1.05);
            border-color: var(--primary-green);
        }

        .worker-rating {
            position: absolute;
            top: 15px;
            right: 15px;
            background-color: var(--white);
            padding: 5px 10px;
            border-radius: 20px;
            font-size: var(--font-size-small);
            font-weight: 600;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        .worker-rating i {
            color: #f4a261;
            margin-right: 3px;
        }

        .worker-info {
            padding: 20px;
            flex-grow: 1;
        }

        .worker-info h3 {
            font-size: var(--font-size-h3);
            margin-bottom: 10px;
            color: var(--dark-grey);
        }

        .worker-info p {
            font-size: var(--font-size-body);
            color: var(--medium-grey);
            margin-bottom: 8px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .tags {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            margin-top: 15px;
        }

        .tag {
            background: var(--light-green);
            color: var(--primary-green);
            padding: 5px 12px;
            border-radius: 20px;
            font-size: var(--font-size-small);
            font-weight: 500;
            transition: var(--transition);
        }

        .tag:hover {
            background-color: var(--primary-green);
            color: var(--white);
        }

        .worker-actions {
            padding: 15px 20px;
            display: flex;
            justify-content: space-between;
            gap: 10px;
            border-top: 1px solid var(--light-grey);
            background-color: #fafafa;
        }

        .btn {
            padding: 10px 15px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: var(--font-size-body);
            font-weight: 500;
            transition: var(--transition);
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
        }

        .btn:hover {
            transform: translateY(-2px);
        }

        .btn-view {
            background: #f0f0f0;
            color: var(--dark-grey);
            flex: 1;
        }

        .btn-view:hover {
            background: var(--light-grey);
        }

        .btn-hire {
            background: var(--primary-green);
            color: var(--white);
            flex: 1;
        }

        .btn-hire:hover {
            background: #41665d;
        }

        .btn-reject {
            background: #e63946;
            color: var(--white);
        }

        .btn-reject:hover {
            background: #d32f3a;
        }

        .btn-toggle-details {
            background: #f0f0f0;
            color: var(--dark-grey);
        }

        .btn-toggle-details:hover {
            background: var(--light-grey);
        }

        .btn-toggle-details i {
            transition: var(--transition);
        }

        .btn-toggle-details.active i {
            transform: rotate(180deg);
        }

        /* Worker Requests Section */
        .request-list {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        .request-card {
            background: var(--white);
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
            padding: 20px;
            display: flex;
            flex-direction: column;
            gap: 15px;
            transition: var(--transition);
        }

        .request-card:hover {
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

        .request-card .left {
            display: flex;
            gap: 20px;
        }

        .request-info {
            flex: 1;
        }

        .request-info h3 {
            font-size: var(--font-size-h3);
            margin-bottom: 12px;
            color: var(--dark-grey);
        }

        .request-details {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 10px;
        }

        .detail-item {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }

        .detail-label {
            font-size: var(--font-size-small);
            color: var(--medium-grey);
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .detail-value {
            font-size: var(--font-size-body);
            color: var(--dark-grey);
            font-weight: 500;
        }

        .request-actions {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }

        .details {
            display: none;
            padding: 15px;
            background: #f9f9f9;
            border-radius: var(--border-radius);
            margin-top: 5px;
            border: 1px solid var(--light-grey);
            animation: slideDown 0.3s ease;
        }

        @keyframes slideDown {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .detail-expanded-item {
            margin-bottom: 10px;
            display: flex;
            flex-direction: column;
            gap: 5px;
        }

        .detail-link {
            color: var(--primary-green);
            text-decoration: none;
            transition: var(--transition);
            font-size: var(--font-size-body);
        }

        .detail-link:hover {
            text-decoration: underline;
        }

        /* Requested Workers Section */
        .table-responsive {
            overflow-x: auto;
            background: var(--white);
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
        }

        .requested-table {
            width: 100%;
            border-collapse: collapse;
        }

        .requested-table th,
        .requested-table td {
            padding: 15px;
            text-align: left;
            border-bottom: 1px solid var(--light-grey);
            font-size: var(--font-size-body);
        }

        .requested-table th {
            background: #f9f9f9;
            font-weight: 600;
            color: var(--dark-grey);
            position: sticky;
            top: 0;
            z-index: 10;
        }

        .requested-table th i {
            margin-right: 8px;
            color: var(--primary-green);
        }

        .requested-table tr:hover {
            background-color: rgba(77, 122, 112, 0.05);
        }

        .status {
            padding: 5px 10px;
            border-radius: 20px;
            font-size: var(--font-size-small);
            font-weight: 500;
            display: inline-block;
        }

        .status-accepted {
            background: var(--light-green);
            color: var(--primary-green);
        }

        .status-rejected {
            background: #f8d7da;
            color: #e63946;
        }

        .status-pending {
            background: #fef3c7;
            color: #d97706;
        }

        /* Modal */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            justify-content: center;
            align-items: center;
            z-index: 1000;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .modal.show {
            opacity: 1;
        }

        .modal-content {
            background: var(--white);
            border-radius: var(--border-radius);
            width: 90%;
            max-width: 700px;
            max-height: 90vh;
            overflow-y: auto;
            position: relative;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
            transform: translateY(-20px);
            transition: transform 0.3s ease;
        }

        .modal.show .modal-content {
            transform: translateY(0);
        }

        .modal-header {
            display: flex;
            align-items: center;
            padding: 20px;
            border-bottom: 1px solid var(--light-grey);
            background-color: var(--light-green);
            gap: 20px;
        }

        .modal-profile-image {
            width: 100px;
            height: 80px;
            border-radius: 12px;
            border: 4px solid var(--white);
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            object-fit: cover;
            transition: var(--transition);
        }

        .modal-profile-image:hover {
            transform: scale(1.05);
            border-color: var(--primary-green);
        }

        .modal-header-info h2 {
            font-size: var(--font-size-h2);
            margin-bottom: 5px;
        }

        .modal-header-info p {
            font-size: var(--font-size-body);
            color: var(--medium-grey);
            margin-bottom: 10px;
        }

        .modal-rating {
            color: #f4a261;
            font-size: var(--font-size-body);
        }

        .modal-body {
            padding: 20px;
        }

        .modal-section {
            margin-bottom: 25px;
        }

        .modal-section h4 {
            font-size: var(--font-size-h4);
            margin-bottom: 10px;
            color: var(--dark-grey);
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .modal-section h4 i {
            color: var(--primary-green);
        }

        .modal-section p {
            font-size: var(--font-size-body);
        }

        .modal-details {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 10px;
        }

        .modal-detail-item {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }

        .modal-detail-label {
            font-size: var(--font-size-small);
            color: var(--medium-grey);
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .modal-detail-value {
            font-size: var(--font-size-body);
            color: var(--dark-grey);
            font-weight: 500;
        }

        .modal-detail-value a {
            color: var(--primary-green);
            text-decoration: none;
        }

        .modal-detail-value a:hover {
            text-decoration: underline;
        }

        .projects-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
            margin-top: 15px;
        }

        .project {
            background: #f9f9f9;
            border-radius: var(--border-radius);
            overflow: hidden;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
        }

        .project img {
            width: 100%;
            height: 200px;
            object-fit: cover;
        }

        .project-info {
            padding: 15px;
        }

        .project-info h5 {
            font-size: var(--font-size-h4);
            margin-bottom: 5px;
        }

        .project-info p {
            font-size: var(--font-size-body);
            color: var(--medium-grey);
            margin-bottom: 5px;
        }

        .close {
            position: absolute;
            top: 15px;
            right: 20px;
            font-size: 28px;
            cursor: pointer;
            color: var(--dark-grey);
            transition: var(--transition);
            z-index: 10;
        }

        .close:hover {
            color: #e63946;
            transform: scale(1.1);
        }

        .modal-footer {
            padding: 15px 20px;
            display: flex;
            justify-content: flex-end;
            border-top: 1px solid var(--light-grey);
            background-color: #fafafa;
        }

        .modal-hire-btn {
            padding: 12px 25px;
            font-size: var(--font-size-body);
        }

        /* Hire Modal Specific Styles */
        .hire-modal-content {
            max-width: 500px;
        }

        .hire-modal-header {
            background-color: var(--white);
            border-bottom: 1px solid var(--light-grey);
        }

        .hire-modal-header h2 {
            font-size: var(--font-size-h2);
            color: var(--dark-grey);
        }

        .form-group {
            margin-bottom: 15px;
        }

        .form-group label {
            display: block;
            font-size: var(--font-size-body);
            color: var(--medium-grey);
            margin-bottom: 5px;
            font-weight: 500;
        }

        .form-group input,
        .form-group select {
            width: 100%;
            padding: 10px;
            border: 1px solid var(--light-grey);
            border-radius: var(--border-radius);
            font-size: var(--font-size-body);
            transition: var(--transition);
        }

        .form-group input:focus,
        .form-group select:focus {
            outline: none;
            border-color: var(--primary-green);
            box-shadow: 0 0 0 2px rgba(77, 122, 112, 0.2);
        }

        /* Responsive styles */
        @media (max-width: 992px) {
            .worker-grid {
                grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            }
            
            .request-details {
                grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
            }
        }

        @media (max-width: 768px) {
            .tabs {
                flex-wrap: wrap;
            }
            
            .tab {
                flex-grow: 1;
                text-align: center;
                padding: 12px 15px;
            }
            
            .section-header {
                flex-direction: column;
                align-items: flex-start;
            }
            
            .filter-controls {
                width: 100%;
            }
            
            .search-input {
                flex-grow: 1;
            }
            
            .request-card .left {
                flex-direction: column;
            }
            
            .request-actions {
                justify-content: space-between;
            }
            
            .modal-content,
            .hire-modal-content {
                width: 95%;
            }
            
            .modal-header,
            .hire-modal-header {
                flex-direction: column;
                text-align: center;
            }
            
            .projects-grid {
                grid-template-columns: 1fr;
            }
        }

        @media (max-width: 576px) {
            .worker-grid {
                grid-template-columns: 1fr;
            }
            
            .request-actions {
                flex-direction: column;
            }
            
            .btn {
                width: 100%;
            }
            
            .profile-image {
                width: 60px;
                height: 45px;
            }
            
            .modal-profile-image {
                width: 80px;
                height: 60px;
            }
        }
    </style>
</head>
<body>
    <%- include('navbar_company') %>

    <div class="container">
        <!-- Tabs -->
        <div class="tabs">
            <div class="tab active" data-tab="find-workers">
                <i class="fas fa-search"></i> Find Workers
            </div>
            <div class="tab" data-tab="worker-requests">
                <i class="fas fa-envelope"></i> Worker Requests
            </div>
            <div class="tab" data-tab="requested-workers">
                <i class="fas fa-clipboard-list"></i> Requested Workers
            </div>
        </div>

        <!-- Find Workers Section -->
        <div id="find-workers" class="section active">
            <div class="section-header">
                <h2>Available Workers</h2>
                <div class="filter-controls">
                    <input type="text" placeholder="Search workers..." class="search-input">
                    <select class="filter-dropdown">
                        <option value="all">All Skills</option>
                        <option value="carpentry">Carpentry</option>
                        <option value="electrical">Electrical</option>
                        <option value="plumbing">Plumbing</option>
                        <option value="masonry">Masonry</option>
                        <option value="painting">Painting</option>
                    </select>
                </div>
            </div>
            
            <div class="worker-grid">
                <% workers.forEach(worker => { %>
                  <div class="worker-card">
                    <div class="worker-card-header">
                      <img src="<%= worker.profileImage %>" alt="Profile" class="profile-image">
                      <div class="worker-rating">
                        <span><i class="fas fa-star"></i> <%= worker.rating %></span>
                      </div>
                    </div>
                    <div class="worker-info">
                      <h3><%= worker.name %></h3>
                      <p class="experience"><i class="fas fa-briefcase"></i> <%= worker.experience %> experience</p>
                      <p class="email"><i class="fas fa-envelope"></i> <%= worker.email %></p>
                      <div class="tags">
                        <% worker.specialties.forEach(skill => { %>
                          <span class="tag"><%= skill %></span>
                        <% }) %>
                      </div>
                    </div>
                    <div class="worker-actions">
                      <button class="btn btn-view" 
                              data-worker="<%= worker.name %>" 
                              data-title="<%= worker.title %>" 
                              data-rating="<%= worker.rating %>" 
                              data-about="<%= worker.about %>" 
                              data-specialties="<%= worker.specialties.join(', ') %>" 
                              data-projects='<%= JSON.stringify(worker.projects) %>' 
                              data-contact="<%= worker.contact %>" 
                              data-location="<%= worker.location %>" 
                              data-linkedin="<%= worker.linkedin %>" 
                              data-previous-work="<%= worker.previousWork %>">
                        <i class="fas fa-eye"></i> View Profile
                      </button>
                      <button class="btn btn-hire hire-btn" 
                              data-worker="<%= worker.name %>" 
                              data-worker-id="<%= worker._id %>">
                        <i class="fas fa-user-plus"></i> Hire
                      </button>
                    </div>
                  </div>
                <% }) %>
              </div>
        </div>

        <!-- Worker Requests Section -->
        <div id="worker-requests" class="section">
            <div class="section-header">
                <h2>Pending Worker Requests</h2>
                <div class="filter-controls">
                    <input type="text" placeholder="Search requests..." class="search-input">
                </div>
            </div>

            <div class="request-list">
    <% if (workerRequests.length === 0) { %>
      <p>No worker requests at this time.</p>
    <% } else { %>
      <% workerRequests.forEach(request => { %>
        <div class="request-card" data-worker-id="<%= request.workerId._id %>" data-request-id="<%= request._id %>">
          <div class="left">
            <img src="<%= request.workerId.profileImage %>" alt="Profile" class="profile-image">
            <div class="request-info">
              <h3><%= request.workerId.name %></h3>
              <div class="request-details">
                <div class="detail-item">
                  <span class="detail-label"><i class="fas fa-envelope"></i> Email:</span>
                  <span class="detail-value"><%= request.workerId.email %></span>
                </div>
                <div class="detail-item">
                  <span class="detail-label"><i class="fas fa-user-tie"></i> Role:</span>
                  <span class="detail-value"><%= request.position %></span>
                </div>
                <div class="detail-item">
                  <span class="detail-label"><i class="fas fa-map-marker-alt"></i> Location:</span>
                  <span class="detail-value"><%= request.location %></span>
                </div>
                <div class="detail-item">
                  <span class="detail-label"><i class="fas fa-tools"></i> Specialties:</span>
                  <span class="detail-value"><%= request.workerId.specialties.join(', ') %></span>
                </div>
                <div class="detail-item">
                  <span class="detail-label"><i class="fas fa-briefcase"></i> Experience:</span>
                  <span class="detail-value"><%= request.workerId.experience %></span>
                </div>
              </div>
            </div>
          </div>
          <div class="request-actions">
            <button class="btn btn-view" 
                    data-worker="<%= request.workerId.name %>" 
                    data-title="<%= request.workerId.title %>" 
                    data-rating="<%= request.workerId.rating %>" 
                    data-about="<%= request.workerId.about %>" 
                    data-specialties="<%= request.workerId.specialties.join(', ') %>" 
                    data-projects='<%= JSON.stringify(request.workerId.projects) %>' 
                    data-contact="<%= request.workerId.contact %>" 
                    data-location="<%= request.workerId.location %>" 
                    data-linkedin="<%= request.workerId.linkedin %>" 
                    data-previous-work="<%= request.workerId.previousWork %>"
                    data-profile-image="<%= request.workerId.profileImage %>">
              <i class="fas fa-eye"></i> View Profile
            </button>
            <button class="btn btn-hire btn-accept" data-request-id="<%= request._id %>">
              <i class="fas fa-check"></i> Accept
            </button>
            <button class="btn btn-reject" data-request-id="<%= request._id %>">
              <i class="fas fa-times"></i> Reject
            </button>
            <button class="btn btn-toggle-details">
              <i class="fas fa-chevron-down"></i> Details
            </button>
          </div>
          <div class="details">
            <div class="detail-expanded-item">
              <span class="detail-label"><i class="fas fa-file-alt"></i> Resume:</span>
              <span class="detail-value"><a href="<%= request.workerId.resume %>" class="detail-link">Download Resume</a></span>
            </div>
            <div class="detail-expanded-item">
              <span class="detail-label"><i class="fab fa-linkedin"></i> LinkedIn:</span>
              <span class="detail-value"><a href="<%= request.workerId.linkedin %>" class="detail-link"><%= request.workerId.linkedin %></a></span>
            </div>
            <div class="detail-expanded-item">
              <span class="detail-label"><i class="fas fa-history"></i> Previous Work:</span>
              <span class="detail-value"><%= request.workerId.previousWork %></span>
            </div>
          </div>
        </div>
      <% }) %>
    <% } %>
  </div>
        </div>

        <!-- Requested Workers Section -->
<div id="requested-workers" class="section">
    <div class="section-header">
        <h2>Requested Workers Status</h2>
        <div class="filter-controls">
            <input type="text" placeholder="Search workers..." class="search-input">
            <select class="filter-dropdown">
                <option value="all">All Status</option>
                <option value="accepted">Accepted</option>
                <option value="pending">Pending</option>
                <option value="rejected">Rejected</option>
            </select>
        </div>
    </div>

    <div class="table-responsive">
        <table class="requested-table">
            <thead>
                <tr>
                    <th><i class="fas fa-user"></i> Worker Name</th>
                    <th><i class="fas fa-envelope"></i> Email</th>
                    <th><i class="fas fa-briefcase"></i> Position</th>
                    <th><i class="fas fa-map-marker-alt"></i> Location</th>
                    <th><i class="fas fa-rupee-sign"></i> Expected Salary</th>
                    <th><i class="fas fa-info-circle"></i> Status</th>
                </tr>
            </thead>
            <tbody>
                <% if (requestedWorkers && requestedWorkers.length > 0) { %>
                    <% requestedWorkers.forEach(request => { %>
                        <tr>
                            <td><%= request.worker.name %></td>
                            <td><%= request.worker.email %></td>
                            <td><%= request.positionApplying %></td>
                            <td><%= request.location %></td>
                            <td>₹<%= request.expectedSalary.toLocaleString('en-IN') %></td>
                            <td><span class="status status-<%= request.status.toLowerCase() %>"><%= request.status %></span></td>
                        </tr>
                    <% }) %>
                <% } else { %>
                    <tr>
                        <td colspan="6">No requested workers found.</td>
                    </tr>
                <% } %>
            </tbody>
        </table>
    </div>
    
</div>

        <!-- Hire Request Modal -->
        <div id="hire-modal" class="modal">
            <div class="modal-content hire-modal-content">
                <span class="close">×</span>
                <div class="modal-header hire-modal-header">
                    <h2>Hire Worker</h2>
                </div>
                <form id="hire-form">
                    <div class="modal-body">
                        <p id="hire-modal-worker-name" style="margin-bottom: 15px;"></p>
                        <div class="form-group">
                            <label for="position">Position</label>
                            <input type="text" id="position" name="position" placeholder="Enter position (e.g., Master Carpenter)" required>
                        </div>
                        <div class="form-group">
                            <label for="location">Location</label>
                            <input type="text" id="location" name="location" placeholder="Enter job location (e.g., Guntur)" required>
                        </div>
                        <div class="form-group">
                            <label for="salary">Salary (₹/hr)</label>
                            <input type="number" id="salary" name="salary" placeholder="Enter salary (e.g., 1200)" required>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-view" id="cancel-hire">
                            <i class="fas fa-times"></i> Cancel
                        </button>
                        <button type="submit" class="btn btn-hire" id="submit-hire">
                            <i class="fas fa-paper-plane"></i> Send Request
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    <script>
    // DOM Elements
const tabs = document.querySelectorAll('.tab');
const sections = document.querySelectorAll('.section');
const profileModal = document.getElementById('profile-modal');
const hireModal = document.getElementById('hire-modal');
const modalCloseButtons = document.querySelectorAll('.modal .close');
const viewProfileButtons = document.querySelectorAll('.btn-view');
const hireButtons = document.querySelectorAll('.hire-btn');
const toggleDetailsButtons = document.querySelectorAll('.btn-toggle-details');
const actionButtons = document.querySelectorAll('.btn-hire:not(.hire-btn), .btn-reject');
const searchInputs = document.querySelectorAll('.search-input');
const filterDropdowns = document.querySelectorAll('.filter-dropdown');
const cancelHireBtn = document.getElementById('cancel-hire');
const submitHireBtn = document.getElementById('submit-hire');
const hireModalWorkerName = document.getElementById('hire-modal-worker-name');

// Initialize the app
document.addEventListener('DOMContentLoaded', function() {
    initializeTabs();
    initializeProfileViewButtons();
    initializeHireButtons();
    initializeToggleDetailsButtons();
    initializeActionButtons();
    initializeSearchAndFilters();
    initializeModalEvents();
    
    // Initialize new card functionality
    initializeWorkerCards();
});

// Tab Switching Functionality
function initializeTabs() {
    tabs.forEach(tab => {
        tab.addEventListener('click', () => {
            tabs.forEach(t => t.classList.remove('active'));
            sections.forEach(section => section.classList.remove('active'));
            
            tab.classList.add('active');
            const targetSectionId = tab.getAttribute('data-tab');
            document.getElementById(targetSectionId).classList.add('active');
        });
    });
}

function initializeProfileViewButtons() {
    viewProfileButtons.forEach(button => {
        button.addEventListener('click', (event) => {
            event.preventDefault();
            
            const workerName = button.getAttribute('data-worker');
            const workerTitle = button.getAttribute('data-title');
            const workerRating = button.getAttribute('data-rating');
            const workerAbout = button.getAttribute('data-about');
            const workerSpecialties = button.getAttribute('data-specialties');
            const workerProjects = JSON.parse(button.getAttribute('data-projects') || '[]');
            const workerContact = button.getAttribute('data-contact');
            const workerLocation = button.getAttribute('data-location');
            const workerLinkedIn = button.getAttribute('data-linkedin');
            const workerPreviousWork = button.getAttribute('data-previous-work');
            const profileImage = button.getAttribute('data-profile-image');
            
            // Debug: Log the profile image URL and worker name
            console.log('Worker Name:', workerName);
            console.log('Profile Image URL:', profileImage);
            
            // Update modal content
            document.getElementById('modal-name').textContent = workerName;
            document.getElementById('modal-title').textContent = workerTitle;
            document.getElementById('modal-about').textContent = workerAbout;
            document.getElementById('modal-specialties').textContent = workerSpecialties;
            document.getElementById('modal-contact').textContent = workerContact;
            document.getElementById('modal-location').textContent = workerLocation;
            document.getElementById('modal-linkedin').innerHTML = `<a href="#">${workerLinkedIn}</a>`;
            document.getElementById('modal-previous-work').textContent = workerPreviousWork;
            
            // Update modal profile image with fallback
            const modalProfileImage = document.getElementById('modal-profile-image');
            if (!modalProfileImage) {
                console.error('Error: #modal-profile-image element not found in the DOM');
                return;
            }
            modalProfileImage.src = profileImage && profileImage.trim() !== ''
                ? profileImage
                : `https://api.dicebear.com/9.x/male/svg?seed=${encodeURIComponent(workerName.replace(/\s+/g, ''))}&mouth=smile`;
            
            const stars = Math.round(parseFloat(workerRating));
            let ratingHTML = '';
            for (let i = 0; i < 5; i++) {
                if (i < stars) {
                    ratingHTML += '<i class="fas fa-star"></i>';
                } else {
                    ratingHTML += '<i class="far fa-star"></i>';
                }
            }
            ratingHTML += ` (${workerRating})`;
            document.getElementById('modal-rating').innerHTML = ratingHTML;
            
            const projectsContainer = document.getElementById('modal-projects');
            projectsContainer.innerHTML = '';
            
            if (workerProjects.length === 0) {
                projectsContainer.innerHTML = '<p>No notable projects available.</p>';
            } else {
                workerProjects.forEach(project => {
                    const projectElement = document.createElement('div');
                    projectElement.className = 'project';
                    
                    projectElement.innerHTML = `
                        <img src="${project.image}" alt="${project.title}">
                        <div class="project-info">
                            <h5>${project.title}</h5>
                            <p><i class="fas fa-map-marker-alt"></i> ${project.location}</p>
                            <p>${project.description}</p>
                        </div>
                    `;
                    
                    projectsContainer.appendChild(projectElement);
                });
            }
            
            profileModal.style.display = 'flex';
            setTimeout(() => {
                profileModal.classList.add('show');
            }, 10);
        });
    });
}

// Hire Modal Functionality
function initializeHireButtons() {
    hireButtons.forEach(button => {
        button.addEventListener('click', () => {
            const workerName = button.getAttribute('data-worker');
            const workerId = button.getAttribute('data-worker-id');
            hireModalWorkerName.textContent = `Sending hire request to ${workerName}`;
            hireModalWorkerName.setAttribute('data-worker-id', workerId); // Store worker ID
            hireModal.style.display = 'flex';
            setTimeout(() => {
                hireModal.classList.add('show');
            }, 10);
        });
    });

    const hireForm = document.getElementById('hire-form');
    
    if (hireForm) {
        hireForm.addEventListener('submit', async (e) => {
            e.preventDefault(); // Prevent default form submission

            const formData = new FormData(hireForm);
            const workerId = hireModalWorkerName.getAttribute('data-worker-id');
            const data = {
                position: formData.get('position'),
                location: formData.get('location'),
                salary: parseFloat(formData.get('salary')),
                workerId: workerId // Include worker ID
            };

            if (!data.position || !data.location || !data.salary || !data.workerId) {
                showNotification('Please fill in all fields.', 'error');
                return;
            }

            try {
                const response = await fetch('/companytoworker', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                });

                const result = await response.json();

                if (response.ok) {
                    showNotification(`Hire request sent to ${hireModalWorkerName.textContent.replace('Sending hire request to ', '')} successfully!`, 'success');
                    closeModal(hireModal);
                    hireForm.reset(); // Reset form fields
                } else {
                    showNotification('Error: ' + result.error, 'error');
                }
            } catch (err) {
                console.error('Error submitting form:', err);
                showNotification('An error occurred while sending the request.', 'error');
            }
        });
    } else {
        // Fallback for older implementation
        submitHireBtn.addEventListener('click', () => {
            const position = document.getElementById('position').value;
            const location = document.getElementById('location').value;
            const salary = document.getElementById('salary').value;
            const workerName = hireModalWorkerName.textContent.replace('Sending hire request to ', '');

            if (!position || !location || !salary) {
                showNotification('Please fill in all fields.', 'error');
                return;
            }

            // Simulate sending a hire request (replace with actual backend call)
            console.log(`Hire request sent to ${workerName} for position ${position} at ${location} with salary ₹${salary}/hr`);

            showNotification(`Hire request sent to ${workerName} successfully!`, 'success');
            closeModal(hireModal);

            // Reset form
            document.getElementById('position').value = '';
            document.getElementById('location').value = '';
            document.getElementById('salary').value = '';
        });
    }

    cancelHireBtn.addEventListener('click', () => {
        closeModal(hireModal);
        // Reset form
        const hireForm = document.getElementById('hire-form');
        if (hireForm) {
            hireForm.reset();
        } else {
            document.getElementById('position').value = '';
            document.getElementById('location').value = '';
            document.getElementById('salary').value = '';
        }
    });
}

// Toggle Details in Worker Requests
function initializeToggleDetailsButtons() {
    toggleDetailsButtons.forEach(button => {
        button.addEventListener('click', () => {
            button.classList.toggle('active');
            const requestCard = button.closest('.request-card');
            const details = requestCard.querySelector('.details');
            
            if (details.style.display === 'block') {
                details.style.display = 'none';
                button.innerHTML = '<i class="fas fa-chevron-down"></i> Details';
            } else {
                details.style.display = 'block';
                button.innerHTML = '<i class="fas fa-chevron-up"></i> Hide Details';
            }
        });
    });
}

// Initialize action buttons (hire, reject, etc.)
function initializeActionButtons() {
    actionButtons.forEach(button => {
        button.addEventListener('click', () => {
            if (button.classList.contains('btn-hire')) {
                showNotification('Worker hired successfully!', 'success');
            } else if (button.classList.contains('btn-reject')) {
                showNotification('Worker request rejected.', 'error');
            }
        });
    });
}

// Initialize search and filter functionality
function initializeSearchAndFilters() {
    searchInputs.forEach(input => {
        input.addEventListener('input', debounce(function() {
            const searchTerm = this.value.toLowerCase();
            const currentTab = document.querySelector('.tab.active').getAttribute('data-tab');
            
            if (currentTab === 'find-workers') {
                filterWorkerCards(searchTerm);
            } else if (currentTab === 'worker-requests') {
                filterRequestCards(searchTerm);
            } else if (currentTab === 'requested-workers') {
                // Check if we're using the new card layout or old table layout
                if (document.querySelector('#requested-workers .cards-container')) {
                    filterWorkerCardsBySearch(searchTerm);
                } else {
                    filterTableRows(searchTerm);
                }
            }
        }, 300));
    });
    
    filterDropdowns.forEach(dropdown => {
        dropdown.addEventListener('change', function() {
            const filterValue = this.value;
            const currentTab = document.querySelector('.tab.active').getAttribute('data-tab');
            
            if (currentTab === 'find-workers') {
                filterWorkersBySkill(filterValue);
            } else if (currentTab === 'requested-workers') {
                // Check if we're using the new card layout or old table layout
                if (document.querySelector('#requested-workers .cards-container')) {
                    filterWorkerCardsByStatus(filterValue);
                } else {
                    filterWorkersByStatus(filterValue);
                }
            }
        });
    });
}

// Modal events
function initializeModalEvents() {
    modalCloseButtons.forEach(button => {
        button.addEventListener('click', () => {
            const modal = button.closest('.modal');
            closeModal(modal);
        });
    });

    [profileModal, hireModal].forEach(modal => {
        modal.addEventListener('click', (event) => {
            if (event.target === modal) {
                closeModal(modal);
            }
        });

        document.addEventListener('keydown', (event) => {
            if (event.key === 'Escape' && modal.classList.contains('show')) {
                closeModal(modal);
            }
        });
    });

    const modalHireBtn = document.querySelector('.modal-hire-btn');
    if (modalHireBtn) {
        modalHireBtn.addEventListener('click', () => {
            showNotification('Worker hired successfully!', 'success');
            closeModal(profileModal);
        });
    }
}

// Close modal function
function closeModal(modal) {
    modal.classList.remove('show');
    setTimeout(() => {
        modal.style.display = 'none';
    }, 300);
}

// Filter worker cards based on search term
function filterWorkerCards(searchTerm) {
    const workerCards = document.querySelectorAll('#find-workers .worker-card');
    
    workerCards.forEach(card => {
        const name = card.querySelector('h3').textContent.toLowerCase();
        const skills = Array.from(card.querySelectorAll('.tag')).map(tag => tag.textContent.toLowerCase());
        const email = card.querySelector('.email').textContent.toLowerCase();
        
        if (name.includes(searchTerm) || 
            skills.some(skill => skill.includes(searchTerm)) || 
            email.includes(searchTerm)) {
            card.style.display = 'flex';
        } else {
            card.style.display = 'none';
        }
    });
}

// Filter worker cards based on skill
function filterWorkersBySkill(skill) {
    const workerCards = document.querySelectorAll('#find-workers .worker-card');
    
    workerCards.forEach(card => {
        const skills = Array.from(card.querySelectorAll('.tag')).map(tag => tag.textContent.toLowerCase());
        
        if (skill === 'all' || skills.some(s => s.toLowerCase() === skill.toLowerCase())) {
            card.style.display = 'flex';
        } else {
            card.style.display = 'none';
        }
    });
}

// Filter request cards based on search term
function filterRequestCards(searchTerm) {
    const requestCards = document.querySelectorAll('#worker-requests .request-card');
    
    requestCards.forEach(card => {
        const name = card.querySelector('h3').textContent.toLowerCase();
        const role = card.querySelector('.detail-value').textContent.toLowerCase();
        const location = card.querySelectorAll('.detail-value')[2].textContent.toLowerCase();
        
        if (name.includes(searchTerm) || 
            role.includes(searchTerm) || 
            location.includes(searchTerm)) {
            card.style.display = 'flex';
        } else {
            card.style.display = 'none';
        }
    });
}

// Filter table rows based on search term
function filterTableRows(searchTerm) {
    const tableRows = document.querySelectorAll('#requested-workers tbody tr');
    
    tableRows.forEach(row => {
        const cells = row.querySelectorAll('td');
        const rowText = Array.from(cells).map(cell => cell.textContent.toLowerCase()).join(' ');
        
        if (rowText.includes(searchTerm)) {
            row.style.display = '';
        } else {
            row.style.display = 'none';
        }
    });
}

// Filter table rows based on status
function filterWorkersByStatus(status) {
    const tableRows = document.querySelectorAll('#requested-workers tbody tr');
    
    tableRows.forEach(row => {
        const statusCell = row.querySelector('.status');
        const workerStatus = statusCell.textContent.toLowerCase();
        
        if (status === 'all' || workerStatus === status.toLowerCase()) {
            row.style.display = '';
        } else {
            row.style.display = 'none';
        }
    });
}

// Initialize worker cards in the requested workers section
function initializeWorkerCards() {
    // Find elements for the new card-based layout
    const workerSearch = document.getElementById('worker-search');
    const statusFilter = document.getElementById('status-filter');
    const workerCards = document.querySelectorAll('#requested-workers .worker-card');
    
    // Skip if elements don't exist (old table layout might be in use)
    if (!workerSearch || !statusFilter || workerCards.length === 0) {
        return;
    }
    
    // View profile buttons
    const viewProfileButtons = document.querySelectorAll('#requested-workers .view-profile');
    const acceptButtons = document.querySelectorAll('#requested-workers .accept-btn');
    const rejectButtons = document.querySelectorAll('#requested-workers .reject-btn');
    
    viewProfileButtons.forEach(button => {
        button.addEventListener('click', function() {
            const workerId = this.getAttribute('data-id');
            console.log('View profile for worker ID:', workerId);
            // You might want to show the profile modal here
        });
    });
    
    acceptButtons.forEach(button => {
        button.addEventListener('click', function() {
            const requestId = this.getAttribute('data-id');
            updateRequestStatus(requestId, 'Accepted');
        });
    });
    
    rejectButtons.forEach(button => {
        button.addEventListener('click', function() {
            const requestId = this.getAttribute('data-id');
            updateRequestStatus(requestId, 'Rejected');
        });
    });
}

// Filter worker cards in requested workers section by search term
function filterWorkerCardsBySearch(searchTerm) {
    const workerCards = document.querySelectorAll('#requested-workers .worker-card');
    
    workerCards.forEach(card => {
        const name = card.querySelector('.worker-name').textContent.toLowerCase();
        const email = card.querySelector('.worker-email').textContent.toLowerCase();
        const position = card.querySelector('.worker-details p:nth-child(1)').textContent.toLowerCase();
        
        if (name.includes(searchTerm) || 
            email.includes(searchTerm) || 
            position.includes(searchTerm)) {
            card.style.display = 'block';
        } else {
            card.style.display = 'none';
        }
    });
    
    checkForNoResults();
}

// Filter worker cards in requested workers section by status
function filterWorkerCardsByStatus(status) {
    const workerCards = document.querySelectorAll('#requested-workers .worker-card');
    
    workerCards.forEach(card => {
        const cardStatus = card.getAttribute('data-status').toLowerCase();
        
        if (status === 'all' || cardStatus === status.toLowerCase()) {
            card.style.display = 'block';
        } else {
            card.style.display = 'none';
        }
    });
    
    checkForNoResults();
}

// Check if there are any visible cards after filtering
function checkForNoResults() {
    const workerCards = document.querySelectorAll('#requested-workers .worker-card');
    const cardsContainer = document.querySelector('#requested-workers .cards-container');
    
    if (!cardsContainer) return;
    
    const visibleCards = Array.from(workerCards).filter(card => card.style.display !== 'none');
    let noResultsMessage = document.querySelector('#requested-workers .no-results-message');
    
    if (visibleCards.length === 0) {
        if (!noResultsMessage) {
            noResultsMessage = document.createElement('div');
            noResultsMessage.className = 'no-results-message';
            noResultsMessage.innerHTML = '<p>No workers match your search criteria.</p>';
            cardsContainer.appendChild(noResultsMessage);
        } else {
            noResultsMessage.style.display = 'block';
        }
    } else if (noResultsMessage) {
        noResultsMessage.style.display = 'none';
    }
}

// Function to update request status via AJAX
function updateRequestStatus(requestId, status) {
    fetch('/update-worker-request', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.content || ''
        },
        body: JSON.stringify({ requestId, status })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Update UI to reflect the new status
            const card = document.querySelector(`button[data-id="${requestId}"]`).closest('.worker-card');
            const statusSpan = card.querySelector('.status');
            
            // Update status text and class
            statusSpan.textContent = status;
            statusSpan.className = `status status-${status.toLowerCase()}`;
            
            // Update data-status attribute
            card.setAttribute('data-status', status.toLowerCase());
            
            // Hide action buttons if status is no longer pending
            if (status !== 'Pending') {
                const actionButtons = card.querySelector('.action-buttons');
                if (actionButtons) {
                    actionButtons.style.display = 'none';
                }
            }
            
            // Show notification
            showNotification(`Worker request ${status.toLowerCase()}`, status === 'Accepted' ? 'success' : 'info');
            
            // Re-apply any active filters
            const statusFilter = document.getElementById('status-filter');
            if (statusFilter && statusFilter.value !== 'all') {
                filterWorkerCardsByStatus(statusFilter.value);
            }
        } else {
            showNotification('Failed to update status: ' + (data.message || 'Unknown error'), 'error');
        }
    })
    .catch(error => {
        console.error('Error updating request status:', error);
        showNotification('An error occurred while updating the status', 'error');
    });
}

// Show notification
function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    
    let icon = '';
    switch (type) {
        case 'success':
            icon = '<i class="fas fa-check-circle"></i>';
            break;
        case 'error':
            icon = '<i class="fas fa-exclamation-circle"></i>';
            break;
        case 'info':
            icon = '<i class="fas fa-info-circle"></i>';
            break;
        case 'warning':
            icon = '<i class="fas fa-exclamation-triangle"></i>';
            break;
    }
    
    notification.innerHTML = `
        <div class="notification-content">
            ${icon}
            <span>${message}</span>
        </div>
        <button class="notification-close">×</button>
    `;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.classList.add('show');
    }, 10);
    
    const closeBtn = notification.querySelector('.notification-close');
    closeBtn.addEventListener('click', () => {
        notification.classList.remove('show');
        setTimeout(() => {
            notification.remove();
        }, 300);
    });
    
    setTimeout(() => {
        if (notification.parentNode) {
            notification.classList.remove('show');
            setTimeout(() => {
                notification.remove();
            }, 300);
        }
    }, 5000);
}

// Debounce function for search input
function debounce(func, delay) {
    let timeout;
    return function() {
        const context = this;
        const args = arguments;
        clearTimeout(timeout);
        timeout = setTimeout(() => func.apply(context, args), delay);
    };
}

// Add CSS for notifications
if (!document.querySelector('#notification-styles')) {
    const notificationStyles = document.createElement('style');
    notificationStyles.id = 'notification-styles';
    notificationStyles.textContent = `
        .notification {
            position: fixed;
            bottom: 20px;
            right: 20px;
            padding: 15px;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            gap: 15px;
            background: var(--white);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            z-index: 1100;
            min-width: 300px;
            max-width: 450px;
            transform: translateY(100px);
            opacity: 0;
            transition: all 0.3s ease;
        }
        
        .notification.show {
            transform: translateY(0);
            opacity: 1;
        }
        
        .notification-content {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .notification i {
            font-size: 20px;
        }
        
        .notification-success {
            border-left: 4px solid var(--primary-green);
        }
        
        .notification-success i {
            color: var(--primary-green);
        }
        
        .notification-error {
            border-left: 4px solid #e63946;
        }
        
        .notification-error i {
            color: #e63946;
        }
        
        .notification-info {
            border-left: 4px solid #3b82f6;
        }
        
        .notification-info i {
            color: #3b82f6;
        }
        
        .notification-warning {
            border-left: 4px solid #d97706;
        }
        
        .notification-warning i {
            color: #d97706;
        }
        
        .notification-close {
            background: none;
            border: none;
            font-size: 20px;
            cursor: pointer;
            color: var(--medium-grey);
            transition: color 0.3s ease;
        }
        
        .notification-close:hover {
            color: var(--dark-grey);
        }
        
        .notification-content span {
            font-size: var(--font-size-body);
        }
    `;
    document.head.appendChild(notificationStyles);
}
// Function to update request status via AJAX
function updateRequestStatus(requestId, status) {
    fetch('/update-company-request', {  // Changed endpoint
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.content || ''
        },
        body: JSON.stringify({ requestId, status })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Update UI to reflect the new status
            const card = document.querySelector(`button[data-id="${requestId}"]`).closest('.worker-card');
            const statusSpan = card.querySelector('.status');
            
            // Update status text and class
            statusSpan.textContent = status;
            statusSpan.className = `status status-${status.toLowerCase()}`;
            
            // Update data-status attribute
            card.setAttribute('data-status', status.toLowerCase());
            
            // Hide action buttons if status is no longer pending
            if (status !== 'Pending') {
                const actionButtons = card.querySelector('.action-buttons');
                if (actionButtons) {
                    actionButtons.style.display = 'none';
                }
            }
            
            // Show notification
            showNotification(`Worker request ${status.toLowerCase()}`, status === 'Accepted' ? 'success' : 'info');
            
            // Re-apply any active filters
            const statusFilter = document.getElementById('status-filter');
            if (statusFilter && statusFilter.value !== 'all') {
                filterWorkerCardsByStatus(statusFilter.value);
            }
        } else {
            showNotification('Failed to update status: ' + (data.message || 'Unknown error'), 'error');
        }
    })
    .catch(error => {
        console.error('Error updating request status:', error);
        showNotification('An error occurred while updating the status', 'error');
    });
}
// Function to handle status updates
function updateRequestStatus(requestId, status) {
    // Show loading state
    const card = document.querySelector(`button[data-id="${requestId}"]`).closest('.worker-card');
    const statusSpan = card.querySelector('.status');
    statusSpan.textContent = 'Updating...';
    statusSpan.className = 'status status-updating';

    // Disable buttons during update
    const buttons = card.querySelectorAll('button');
    buttons.forEach(btn => btn.disabled = true);

    fetch('/update-company-request', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.content || ''
        },
        body: JSON.stringify({ requestId, status })
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        return response.json();
    })
    .then(data => {
        if (data.success) {
            // Update UI
            statusSpan.textContent = status;
            statusSpan.className = `status status-${status.toLowerCase()}`;
            card.setAttribute('data-status', status.toLowerCase());

            // Hide action buttons if not pending
            if (status !== 'Pending') {
                const actionButtons = card.querySelector('.action-buttons');
                if (actionButtons) actionButtons.style.display = 'none';
            }

            showNotification(`Request ${status.toLowerCase()} successfully`, 'success');
        } else {
            throw new Error(data.message || 'Update failed');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        statusSpan.textContent = 'Error';
        statusSpan.className = 'status status-error';
        showNotification(`Failed to update: ${error.message}`, 'error');
    })
    .finally(() => {
        // Re-enable buttons
        buttons.forEach(btn => btn.disabled = false);
    });
}

// Initialize event listeners
document.addEventListener('DOMContentLoaded', function() {
    document.querySelectorAll('.accept-btn').forEach(button => {
        button.addEventListener('click', function() {
            updateRequestStatus(this.getAttribute('data-id'), 'Accepted');
        });
    });

    document.querySelectorAll('.reject-btn').forEach(button => {
        button.addEventListener('click', function() {
            updateRequestStatus(this.getAttribute('data-id'), 'Rejected');
        });
    });
});
</script>
</body>
</html>